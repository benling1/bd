<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kycrm.syn.dao.member.IMemberDTODao">
	<resultMap id="memberInfoMap"
		type="com.kycrm.member.domain.entity.member.MemberInfoDTO">
		<result column="id" property="id" jdbcType="BIGINT" />
		<result column="uid" property="uid" jdbcType="BIGINT" />
		<result column="user_name" property="userName" jdbcType="VARCHAR" />
		<result column="buyer_id" property="buyerId" jdbcType="VARCHAR" />
		<result column="grade_id" property="gradeId" jdbcType="BIGINT" />
		<result column="buyer_nick" property="buyerNick" jdbcType="VARCHAR" />
		<result column="buyer_email" property="buyerEmail" jdbcType="VARCHAR" />
		<result column="buyer_alipay_no" property="buyerAlipayNo"
			jdbcType="VARCHAR" />
		<result column="status" property="status" jdbcType="VARCHAR" />
		<result column="trade_num" property="tradeNum" jdbcType="BIGINT" />
		<result column="close_trade_num" property="closeTradeNum"
			jdbcType="BIGINT" />
		<result column="trade_amount" property="tradeAmount" jdbcType="DOUBLE" />
		<result column="close_trade_amount" property="closeTradeAmount"
			jdbcType="DOUBLE" />
		<result column="province" property="province" jdbcType="VARCHAR" />
		<result column="city" property="city" jdbcType="VARCHAR" />
		<result column="item_num" property="itemNum" jdbcType="BIGINT" />
		<result column="close_item_num" property="closeItemNum"
			jdbcType="BIGINT" />
		<result column="avg_trade_price" property="avgTradePrice"
			jdbcType="DOUBLE" />
		<result column="relation_source" property="relationSource"
			jdbcType="INTEGER" />
		<result column="last_trade_time" property="lastTradeTime"
			jdbcType="TIME" />
		<result column="gender" property="gender" jdbcType="VARCHAR" />
		<result column="age" property="age" jdbcType="INTEGER" />
		<result column="occupation" property="occupation" jdbcType="VARCHAR" />
		<result column="birthday" property="birthday" jdbcType="VARCHAR" />
		<result column="qq" property="qq" jdbcType="VARCHAR" />
		<result column="we_chat" property="weChat" jdbcType="VARCHAR" />
		<result column="mobile" property="mobile" jdbcType="VARCHAR" />
		<result column="register_date" property="registerDate"
			jdbcType="TIME" />
		<result column="score" property="score" jdbcType="VARCHAR" />
		<result column="remarks" property="remarks" jdbcType="VARCHAR" />
		<result column="remark_str_time" property="remarkStrTime"
			jdbcType="VARCHAR" />
		<result column="cur_grade_name" property="curGradeName"
			jdbcType="VARCHAR" />
		<result column="refund_flag" property="refundFlag" jdbcType="INTEGER" />
		<result column="neutral_bad_bate" property="neutralBadRate"
			jdbcType="INTEGER" />
		<!-- 后续添加 -->
		<result column="unsubscribe" property="unsubscribe" jdbcType="INTEGER" />
		<result column="receiver_name" property="receiverName"
			jdbcType="VARCHAR" />
		<!-- 辅助信息 -->
		<result column="createdBy" property="createdBy" jdbcType="VARCHAR" />
		<result column="createdDate" property="createdDate" jdbcType="TIME" />
		<result column="lastModifiedBy" property="lastModifiedBy"
			jdbcType="VARCHAR" />
		<result column="lastModifiedDate" property="lastModifiedDate"
			jdbcType="TIME" />
		<!-- 锁optlock -->
		<result column="optlock" property="version" jdbcType="BIGINT" />
		<!--新会员筛选添加的值 -->
		<result column="dnseg_three" property="dnsegThree" jdbcType="VARCHAR" />
		<result column="operator" property="operator" jdbcType="VARCHAR" />
		<result column="dnseg_province" property="dnsegProvince"
			jdbcType="VARCHAR" />
		<result column="dnseg_city" property="dnsegCity" jdbcType="VARCHAR" />
		<result column="first_pay_time" property="firstPayTime"
			jdbcType="TIME" />
			 <result column="first_trade_time" property="firstTradeTime" jdbcType="TIME"/>
	    <result column="last_pay_time" property="lastPayTime" jdbcType="TIME"/>
	    <result column="first_trade_finish_time" property="firstTradeFinishTime" jdbcType="TIME"/>
	    <result column="last_trade_finish_time" property="lastTradeFinishTime" jdbcType="TIME"/>
	</resultMap>

	<sql id="Base_Column_List">
		id,uid,user_name,buyer_id,grade_id,buyer_nick,buyer_email,buyer_alipay_no,status,
		trade_num,close_trade_num,trade_amount,close_trade_amount,province,city,item_num,
		close_item_num,avg_trade_price,relation_source,last_trade_time,gender,age,occupation,
		birthday,qq,we_chat,mobile,register_date,score,remarks,remark_str_time,cur_grade_name,is_refund,
		neutral_bad_bate,unsubscribe,receiver_name,
		createdBy,createdDate,lastModifiedBy,lastModifiedDate,optlock,
	</sql>

	<!-- 是否存在表 -->
	<select id="isExistsTable" parameterType="java.lang.Long"
		resultType="java.lang.String">
		SHOW TABLES LIKE 'crm_member_info_dto${_parameter}'
	</select>
	<select id="isExistsMemberReceiveDetailTable" parameterType="java.lang.Long"
		resultType="java.lang.String">
		SHOW TABLES LIKE 'crm_member_receive_detail${_parameter}'
	</select>
	<!-- 是否存在卖家 评论表 -->
	<select id="isExistsTradeRatesTable" parameterType="java.lang.Long"
		resultType="java.lang.String">
		SHOW TABLES LIKE 'crm_trade_rates${_parameter}'
	</select>
	<!-- 是否存在卖家的会员购买统计表 -->
	<select id="isExistsMemberItemAmountTable" parameterType="java.lang.String"
		resultType="java.lang.String">
		SHOW TABLES LIKE 'crm_member_item_amount${_parameter}'
	</select>


	<!-- 自动创建卖家会员表 -->
	<insert id="doCreateMemberItemAmountTableByNewUser"
		parameterType="java.lang.String">
		CREATE TABLE `crm_member_item_amount${_parameter}` (
		`id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键id',
		`mid`
		bigint(20) NOT NULL COMMENT '会员id',
		`item_id` bigint(20) NULL DEFAULT
		NULL COMMENT '商品id',
		`num` int(11) NOT NULL DEFAULT 0 COMMENT '购买数量',
		`last_buy_time` datetime NULL DEFAULT NULL COMMENT '最后购买时间',
		PRIMARY
		KEY (`id`) USING BTREE
		) ENGINE = InnoDB AUTO_INCREMENT=1 CHARACTER SET
		= utf8 COLLATE
		= utf8_general_ci ROW_FORMAT=FIXED;
	</insert>
	<!-- 卖家会员表添加索引 -->
	<insert id="addMemberItemAmountTableIndex" parameterType="java.lang.Long">
		ALTER
		TABLE
		`crm_member_item_amount${_parameter}`
		ADD INDEX index_mid (mid),
		ADD INDEX index_item_id (item_id),
		ADD INDEX index_num (num),
		ADD INDEX
		index_last_buy_time (last_buy_time);
	</insert>

	<!-- 是否存在卖家短信黑名单 -->
	<select id="isExistsSmsBlacklistTable" parameterType="java.lang.String"
		resultType="java.lang.String">
		SHOW TABLES LIKE 'crm_blacklist_dto${_parameter}'
	</select>

	<!-- 自动创建卖家短信黑名单 -->
	<insert id="doCreateSmsBlacklistTableByNewUser" parameterType="java.lang.String">
		CREATE TABLE `crm_blacklist_dto${_parameter}` (
		`id` bigint(20) NOT
		NULL AUTO_INCREMENT COMMENT '主键id',
		`uid` bigint(20) NOT NULL COMMENT
		'用户表的主键id',
		`nick_or_phone` varchar(1000) DEFAULT NULL COMMENT
		'客户昵称/手机号码',
		`nick` varchar(1000) DEFAULT NULL COMMENT '客户昵称',
		`phone`
		varchar(500) DEFAULT NULL COMMENT '手机号码',
		`add_source` varchar(1)
		DEFAULT NULL COMMENT '添加来源 1-单个添加 2-批量添加 3-退订回N/TD',
		`type` varchar(1)
		DEFAULT NULL COMMENT '黑名单类型 1-手机号 2-客户昵称',
		`createdBy` varchar(255)
		DEFAULT NULL,
		`createdDate` datetime DEFAULT NULL,
		`lastModifiedBy`
		varchar(255) DEFAULT NULL,
		`lastModifiedDate` datetime DEFAULT NULL,
		`optlock` int(11) NOT NULL DEFAULT '0',
		PRIMARY KEY (`id`) USING BTREE,
		UNIQUE KEY `id` (`id`) USING BTREE
		) ENGINE=InnoDB DEFAULT CHARSET=utf8
		ROW_FORMAT=DYNAMIC COMMENT='黑名单表';
	</insert>
	<!-- 黑名单表添加索引 -->
	<insert id="addSmsBlacklistTableIndex" parameterType="java.lang.Long">
		ALTER TABLE
		`crm_blacklist_dto${_parameter}`
		ADD INDEX index_phone (phone),
		ADD KEY
		index_nick (nick(255)),
		ADD INDEX index_add_source (add_source),
		ADD
		INDEX index_type (type);
	</insert>


	<!-- 自动创建卖家会员表 -->
	<insert id="doCreateTableByNewUser" parameterType="java.lang.Long">
		CREATE TABLE
		`crm_member_info_dto${_parameter}` (
		id bigint(20) not null
		AUTO_INCREMENT comment '主键id',
		uid bigint(20) comment
		'分库分表实体对应用户表的主键id',
		user_name varchar(255) comment '所属卖家昵称',
		buyer_id
		varchar(255) comment '买家会员ID',
		grade_id bigint(20) comment '会员等级id',
		grade_name varchar(255) comment '会员等级名称',
		buyer_nick varchar(1000)
		comment '买家昵称',
		receiver_name varchar(1000) comment
		'买家名称/签收人名称（可能会随订单发生变化）',
		buyer_email varchar(255) comment '买家邮箱',
		buyer_alipay_no varchar(255) comment '买家支付宝证号',
		status varchar(255)
		comment '会员状态 1-正常 2-黑名单',
		trade_num bigint(20) comment '交易成功笔数',
		close_trade_num bigint(20) comment '关闭交易笔数',
		trade_amount decimal(20,2)
		comment '交易成功金额',
		close_trade_amount decimal(20,2) comment '交易关闭金额',
		province varchar(255) comment '省份',
		city varchar(255) comment '城市',
		item_num bigint(20) comment '购买宝贝件数',
		close_item_num bigint(20) comment
		'关闭交易宝贝笔数',
		avg_trade_price decimal(20,2) comment '平均客单价',
		relation_source int(2) comment '关系来源 1-交易成功 2-未成交 3-卖家主动吸纳',
		last_trade_time datetime comment '最后交易时间',
		gender varchar(2) comment
		'性别 1-男 2-女',
		age int(5) comment '年龄',
		occupation varchar(255) comment
		'职业',
		birthday varchar(255) comment '生日',
		qq varchar(255) comment 'qq',
		we_chat varchar(255) comment '微信',
		mobile varchar(255) comment '手机号',
		register_date datetime comment '注册时间',
		score varchar(255) comment
		'评价得分',
		remarks varchar(255) comment '备注',
		remark_str_time varchar(255)
		comment '备注时间',
		cur_grade_name varchar(255) comment '会员等级名称',
		refund_flag tinyint(2) comment '是否退过款',
		neutral_bad_rate tinyint(2)
		comment '是否给过中差评',
		unsubscribe tinyint(2) comment '是否回过N',
		receiver_info_str varchar(255) comment '收货人名称,收货人地址,手机号',
		last_send_time datetime comment '最后发送时间',
		optlock int(20) comment
		'版本号',
		createdBy varchar(255) comment '创建者',
		createdDate datetime
		comment '创建时间',
		lastModifiedBy varchar(255) comment '最后修改者',
		lastModifiedDate datetime comment '最后修改时间',
		last_marketing_time
		datetime comment '最后发送营销短信时间',
		marketing_sms_number int(10) comment
		'营销短信发送次数',
		credit_rank varchar(255) comment '信用等级',
		horoscope
		varchar(20) comment '星座',
		zodiac varchar(20) comment '生肖',
		blood_type
		varchar(20) comment '血型',
		emotional_state varchar(20) comment '情感状态',
		pay_item_num bigint(10) comment '付款商品数量',
		add_item_num bigint(10)
		comment '拍下商品数量',
		avg_goods_price decimal(20,2) comment '货单价',
		first_pay_time datetime comment '首次付款时间/上次付款时间',
		second_pay_time
		datetime comment '二次付款时间',
		last_pay_time datetime comment
		'最后付款时间/上次付款时间',
		buy_number int(10) comment '总购买次数',
		add_number int(10)
		comment '总拍下次数',
		add_not_pay_number int(10) comment '拍下未付款次数',
		total_pay_fee decimal(20,2) comment '总付款金额',
		first_pay_item bigint(20)
		comment '首次购买商品',
		last_pay_item bigint(20) comment '最后一次购买商品',
		refund_number int(10) comment '退款次数',
		refund_fee decimal(20,2) comment
		'退款金额',
		refund_scale varchar(20) comment '退款比例',
		refund_order_num
		int(10) comment '退款子订单数',
		neutral_bad_rate_num int(10) comment '中差评次数',
		dnseg_three varchar(255) comment '号码号段前三位',
		operator varchar(255)
		comment '运营商',
		dnseg_province varchar(255) comment '运营商所在省',
		dnseg_city
		varchar(255) comment '运营商所在市',
		PRIMARY KEY (`id`)
		) ENGINE=InnoDB
		DEFAULT CHARSET=utf8 ROW_FORMAT=FIXED COMMENT='买家会员信息';
	</insert>
	<!-- member添加索引 -->
	<insert id="addMemberTableIndex" parameterType="java.lang.Long">
		ALTER TABLE
		`crm_member_info_dto${_parameter}`
		ADD INDEX index_last_trade_time
		(last_trade_time),
		ADD INDEX index_trade_num (trade_num),
		ADD INDEX
		index_trade_amount (trade_amount),
		ADD INDEX index_avg_trade_price
		(avg_trade_price),
		ADD INDEX index_close_trade_num (close_trade_num),
		ADD INDEX index_item_num (item_num),
		ADD INDEX
		index_marketing_sms_number (marketing_sms_number),
		ADD INDEX
		index_last_marketing_time (last_marketing_time),
		ADD KEY
		index_buyer_nick (buyer_nick(255)),
		ADD INDEX index_province
		(province),
		ADD INDEX index_city (city),
		ADD INDEX index_mobile
		(mobile),
		ADD INDEX index_refund_flag (refund_flag),
		ADD INDEX
		index_neutral_bad_rate (neutral_bad_rate),
		ADD INDEX index_unsubscribe
		(unsubscribe),
		ADD INDEX index_pay_item_num (pay_item_num),
		ADD INDEX
		index_add_item_num (add_item_num),
		ADD INDEX index_avg_goods_price
		(avg_goods_price),
		ADD INDEX index_buy_number (buy_number),
		ADD INDEX
		index_last_pay_item (last_pay_item),
		ADD INDEX index_refund_number
		(refund_number),
		ADD INDEX index_dnseg_three (dnseg_three),
		ADD INDEX
		index_operator (operator),
		ADD INDEX index_dnseg_province
		(dnseg_province),
		ADD INDEX index_dnseg_city (dnseg_city);
	</insert>

	<insert id="doCreateMemberReceiveDetailTableByNewUser"
		parameterType="java.lang.Long">
		CREATE TABLE `crm_member_receive_detail${_parameter}` (
		`id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键id',
		`uid`
		bigint(20) NULL DEFAULT NULL COMMENT '用户主键id',
		`member_id` bigint(20)
		NULL DEFAULT NULL COMMENT '会员id',
		`buyer_nick` varchar(1000) comment
		'买家昵称',
		`receiver_name` varchar(1000) CHARACTER SET utf8 COLLATE
		utf8_general_ci NULL DEFAULT
		NULL COMMENT '收货人姓名',
		`receiver_address`
		varchar(2000) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT
		NULL COMMENT '收货地址',
		`receiver_mobile` varchar(255) CHARACTER SET utf8
		COLLATE utf8_general_ci NULL DEFAULT
		NULL COMMENT '收货人手机号',
		`remark`
		varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT
		NULL COMMENT '备注内容',
		`optlock` int(10) NULL DEFAULT NULL COMMENT '版本号',
		`createdBy` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci
		NULL DEFAULT
		NULL COMMENT '创建者',
		`createdDate` datetime NULL DEFAULT
		NULL COMMENT '创建时间',
		`lastModifiedBy` varchar(255) CHARACTER SET utf8
		COLLATE utf8_general_ci NULL DEFAULT
		NULL COMMENT '最后修改者',
		`lastModifiedDate` datetime NULL DEFAULT NULL COMMENT '最后修改时间',
		PRIMARY KEY (`id`) USING BTREE,
		UNIQUE KEY `id` (`id`) USING BTREE
		)
		ENGINE = InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT =
		'会员收货人详情表';
	</insert>
	<!-- 多地址表添加索引 -->
	<insert id="addMemberReceiveDetailTableIndex" parameterType="java.lang.Long">
		ALTER TABLE
		`crm_member_receive_detail${_parameter}`
		ADD INDEX
		index_member_id (member_id),
		ADD KEY index_buyer_nick
		(buyer_nick(255)),
		ADD INDEX index_receiver_address (receiver_address),
		ADD INDEX index_receiver_mobile (receiver_mobile);
	</insert>

	<!-- 自动创建卖家 评论表 -->
	<insert id="doCreateTradeRatesTableByNewUser" parameterType="java.lang.Long">
		CREATE TABLE `crm_trade_rates${_parameter}` (
		`id` bigint(20) NOT NULL
		AUTO_INCREMENT,
		`tid` varchar(100) CHARACTER SET utf8 COLLATE
		utf8_general_ci NOT NULL
		COMMENT '交易ID',
		`oid` varchar(50) CHARACTER SET
		utf8 COLLATE utf8_general_ci NOT NULL
		COMMENT '子订单ID',
		`role`
		varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT
		NULL COMMENT '评价者角色.可选值:seller(卖家),buyer(买家)',
		`nick` varchar(1000)
		CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT
		NULL COMMENT
		'评价者昵称',
		`result` varchar(50) CHARACTER SET utf8 COLLATE
		utf8_general_ci NULL DEFAULT
		NULL COMMENT
		'评价结果,可选值:good(好评),neutral(中评),bad(差评)',
		`created` datetime NULL
		DEFAULT NULL COMMENT '评价创建时间,格式:yyyy-MM-dd
		HH:mm:ss',
		`rated_nick`
		varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT
		NULL COMMENT '被评价者昵称',
		`item_title` varchar(200) CHARACTER SET utf8
		COLLATE utf8_general_ci NULL DEFAULT
		NULL COMMENT '商品标题',
		`item_price`
		decimal(10, 0) NULL DEFAULT NULL COMMENT
		'商品价格,精确到2位小数;单位:元.如:200.07，表示:200元7分',
		`content` varchar(2000)
		CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT
		NULL COMMENT
		'评价内容,最大长度:500个汉字',
		`reply` varchar(2000) CHARACTER SET utf8 COLLATE
		utf8_general_ci NULL DEFAULT
		NULL COMMENT '评价解释,最大长度:500个汉字',
		`num_iid`
		bigint(20) NULL DEFAULT NULL COMMENT '商品的数字ID',
		`valid_score`
		tinyint(1) NULL DEFAULT NULL COMMENT '评价信息是否用于记分，
		可取值：true(参与记分)和false(不参与记分)',
		`rate_type` varchar(255) CHARACTER SET
		utf8 COLLATE utf8_general_ci NULL DEFAULT
		NULL COMMENT '评价方式
		自动评价和批量评价两种',
		`optlock` int(11) NOT NULL,
		`createdBy` varchar(100)
		CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT
		NULL,
		`createdDate` datetime NULL DEFAULT NULL,
		`lastModifiedBy` varchar(100)
		CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT
		NULL,
		`lastModifiedDate` datetime NULL DEFAULT NULL,
		PRIMARY KEY (`id`) USING
		BTREE
		) ENGINE = InnoDB CHARACTER
		SET = utf8 COLLATE = utf8_general_ci
		ROW_FORMAT=FIXED COMMENT = '评价列表';
	</insert>
	<!-- 评论表添加索引 -->
	<insert id="addTradeRatesTableIndex" parameterType="java.lang.Long">
		ALTER TABLE
		`crm_trade_rates${_parameter}`
		ADD INDEX index_tid (tid),
		ADD INDEX
		index_oid (oid),
		ADD KEY index_nick (nick(255)),
		ADD INDEX index_result
		(result),
		ADD INDEX index_created (created),
		ADD INDEX index_num_iid
		(num_iid);
	</insert>

	<!-- 校验高级会员筛选历史记录表是否存在 -->
	<select id="isExistsPremiumFilterRecordTable" parameterType="java.lang.Long"
		resultType="java.lang.String">
		SHOW TABLES LIKE 'crm_premium_filter_record${uid}'
	</select>

	<!-- 创建高级会员筛选历史记录表 -->
	<insert id="doCreatePremiumFilterRecordTable" parameterType="java.lang.Long">
		create table crm_premium_filter_record${uid}
		(
		id bigint not null
		AUTO_INCREMENT
		comment '主键',
		uid bigint not null comment '分库分表用户唯一ID',
		filter_type
		varchar(2)
		comment '存储类型(1：基础筛选 2：高级筛选)',
		parameter longtext
		comment
		'高级会员筛选入参(JSON格式)',
		uuid varchar(50) comment
		'筛选时绑定的uuid(方便查询错误)',
		createdBy varchar(255) comment '创建者',
		createdDate
		datetime comment
		'创建时间',
		primary key (id)
		)ENGINE = InnoDB CHARACTER
		SET =
		utf8 COLLATE =
		utf8_general_ci ROW_FORMAT=FIXED COMMENT =
		'高级会员筛选历史记录表';
	</insert>

	<!-- 通过会员昵称查询找到会员 -->
	<select id="queryMemberByBuyerNick" parameterType="java.util.Map"
		resultType="int">
		SELECT count(1)
		FROM crm_member_info_dto${uid}
		WHERE
		buyer_nick = #{buyerNick}
	</select>

	<!-- 批量保存会员信息 -->
	<insert id="batchSaveMemberData" parameterType="java.util.Map">
		INSERT INTO crm_member_info_dto${uid}
		(
		<!-- uid,user_name,buyer_id,grade_id,buyer_nick,buyer_email, buyer_alipay_no,status,trade_num,close_trade_num,trade_amount, 
			close_trade_amount,province,city,item_num,close_item_num, avg_trade_price,relation_source,last_trade_time,gender, 
			age,occupation,birthday,qq,we_chat,mobile,register_date,score, remarks,remark_str_time,cur_grade_name,is_refund,neutral_bad_bate,unsubscribe,receiver_name, 
			createdBy,createdDate,lastModifiedBy,lastModifiedDate,optlock -->
		uid,user_name,buyer_id,grade_id,grade_name,buyer_nick,receiver_name,
		buyer_email,buyer_alipay_no,status,trade_num,close_trade_num,trade_amount,
		close_trade_amount,province,city,item_num,close_item_num,avg_trade_price,
		relation_source,last_trade_time,gender,age,occupation,birthday,
		qq,we_chat,mobile,register_date,score,remarks,remark_str_time,
		cur_grade_name,refund_flag,neutral_bad_rate,unsubscribe,receiver_info_str,
		last_send_time,optlock,createdBy,createdDate,lastModifiedBy,
		lastModifiedDate,last_marketing_time,marketing_sms_number,credit_rank,
		horoscope,zodiac,blood_type,emotional_state,pay_item_num,add_item_num,
		avg_goods_price,first_pay_time,second_pay_time,last_pay_time,buy_number,add_number,
		add_not_pay_number,total_pay_fee,first_pay_item,last_pay_item,refund_number,
		refund_fee,refund_scale,refund_order_num,neutral_bad_rate_num,dnseg_three,
		operator,dnseg_province,dnseg_city,first_trade_time,first_trade_finish_time,last_trade_finish_time
		)
		VALUES
		<foreach collection="entityList" item="member" index="index"
			separator=",">
			(
			<!--#{member.uid},#{member.userName},#{member.buyerId},#{member.gradeId},#{member.buyerNick},#{member.buyerEmail}, 
				#{member.buyerAlipayNo},#{member.status},#{member.tradeNum},#{member.closeTradeNum},#{member.tradeAmount}, 
				#{member.closeTradeAmount},#{member.province},#{member.city},#{member.itemNum},#{member.closeItemNum}, 
				#{member.avgTradePrice},#{member.relationSource},#{member.lastTradeTime},#{member.gender}, 
				#{member.age},#{member.occupation},#{member.birthday},#{member.qq},#{member.weChat},#{member.mobile},#{member.registerDate},#{member.score}, 
				#{member.remarks},#{member.remarkStrTime},#{member.curGradeName},#{member.isRefund},#{member.neutralBadRate},#{member.unsubscribe},#{member.receiverName}, 
				#{member.userName}, NOW(), #{member.userName}, NOW(), 0 -->
			#{member.uid},#{member.userName},#{member.buyerId},#{member.gradeId},
			#{member.gradeName},#{member.buyerNick},#{member.receiverName},#{member.buyerEmail},
			#{member.buyerAlipayNo},#{member.status},0,0,
			0,0,#{member.province},
			#{member.city},0,0,0, 
			#{member.relationSource},#{member.lastTradeTime},#{member.gender},
			#{member.age},#{member.occupation},#{member.birthday},#{member.qq},
			#{member.weChat},#{member.mobile},#{member.registerDate},#{member.score},#{member.remarks},
			#{member.remarkStrTime},#{member.curGradeName},#{member.refundFlag},
			#{member.neutralBadRate},#{member.unsubscribe},#{member.receiverInfoStr},#{member.lastSendTime},
			0,#{member.createdBy},NOW(),#{member.userName},
			NOW(),#{member.lastMarketingTime},#{member.marketingSmsNumber},
			#{member.creditRank},#{member.horoscope},#{member.zodiac},#{member.bloodType},
			#{member.emotionalState},#{member.payItemNum},#{member.addItemNum},#{member.avgGoodsPrice},
			#{member.firstPayTime},#{member.secondPayTime},#{member.lastPayTime},
			#{member.buyNumber},#{member.addNumber},#{member.addNotPayNumber},#{member.totalPayFee},
			#{member.firstPayItem},#{member.lastPayItem},#{member.refundNumber},#{member.refundFee},
			#{member.refundScale},#{member.refundOrderNum},#{member.neutralBadRateNum},
			#{member.dnsegThree},#{member.operator},#{member.dnsegProvince},#{member.dnsegCity},
			#{member.firstTradeTime},#{member.firstTradeFinishTime}
			,#{member.lastTradeFinishTime}
			)
		</foreach>
	</insert>
    

	<!-- 批量更新订单 -->
	<update id="batchUpdateMemberData" parameterType="java.util.Map">
		<foreach collection="entityList" item="member" index="index"
			separator=";" open="" close="">
			UPDATE crm_member_info_dto${uid}
			<set>
				<!-- <if test="member.uid != null and member.uid != ''"></if> -->
				<!-- <if test="member.userName != null and member.userName != ''"></if> -->
				<!-- <if test="member.buyerId != null and member.buyerId != ''"></if> -->
				<!-- <if test="member.buyerNick != null and member.buyerNick != ''"></if> -->
				<!-- <if test="member.buyerEmail != null and member.buyerEmail != ''"></if> -->
				<!-- <if test="member.buyerAlipayNo != null and member.buyerAlipayNo 
					!= ''"></if> -->
				<!-- <if test="member.gender != null and member.gender != ''"></if> -->
				<!-- <if test="member.age != null and member.age != ''"></if> -->
				<!-- <if test="member.occupation != null and member.occupation != ''"></if> -->
				<!-- <if test="member.birthday != null and member.birthday != ''"></if> -->
				<!-- <if test="member.qq != null and member.qq != ''"></if> -->
				<!-- <if test="member.weChat != null and member.weChat != ''"></if> -->
				<!-- <if test="member.mobile != null and member.mobile != ''"></if> -->
				<!-- <if test="member.registerDate != null and member.registerDate != 
					''"></if> -->
				<!-- <if test="member.score != null and member.score != ''"></if> -->
				<!-- <if test="member.status != null and member.status != ''"></if> -->
				<!-- <if test="member.remarks != null and member.remarks != ''"></if> -->
				<!-- <if test="member.curGradeName != null and member.curGradeName != 
					''"></if> -->
				<!-- <if test="member.isRefund != null and member.isRefund != ''"></if> -->
				<!-- <if test="member.neutralBadRate != null and member.neutralBadRate 
					!= ''"></if> -->
				<!-- <if test="member.unsubscribe != null and member.unsubscribe != ''"></if> -->
				<if test="member.receiverName != null and member.receiverName != ''">
					receiver_name = #{member.receiverName},
				</if>
				<if test="member.gradeId != null">
					grade_id = #{member.gradeId},
				</if>
				<!-- 数值计算 -->
			   <!--  <if test="member.tradeNum != null">
					trade_num = IFNULL(trade_num,0)+
					#{member.tradeNum},
				</if> --> 
				<!-- <if test="member.closeTradeNum != null">
					close_trade_num =
					IFNULL(close_trade_num,0)+#{member.closeTradeNum},
				</if> -->
				<!-- <if test="member.tradeAmount != null">
					trade_amount = IFNULL(trade_amount,0)+
					#{member.tradeAmount},
				</if> -->
				<!-- <if test="member.closeTradeAmount != null">
					close_trade_amount =
					IFNULL(close_trade_amount,0)+#{member.closeTradeAmount},
				</if> -->
				<!-- <if test="member.itemNum != null">
					item_num = IFNULL(item_num,0)+#{member.itemNum},
				</if> -->
				<!-- <if test="member.closeItemNum != null">
					close_item_num =
					IFNULL(close_item_num,0)+#{member.closeItemNum},
				</if> -->
				<!-- <if test="member.addItemNum != null">
					add_item_num=IFNULL(add_item_num,0)+#{member.addItemNum},
				</if> -->
				<!-- <if test="member.avgTradePrice != nul">
					avg_trade_price = IFNULL(avg_trade_price,0)+
					#{member.avgTradePrice},
				</if> -->
				<!-- 数值计算 -->
				<if test="member.province != null and member.province != ''">
					province = #{member.province},
				</if>
				<if test="member.city != null and member.city != ''">
					city = #{member.city},
				</if>
				<if test="member.relationSource != null">
					relation_source = #{member.relationSource},
				</if>
				<if test="member.lastTradeTime != null">
					last_trade_time = #{member.lastTradeTime},
				</if>
				<if test="member.refundFlag!=null">
					refund_flag=#{member.refundFlag},
				</if>
				<if test="member.remarkStrTime != null">
					remark_str_time = #{member.remarkStrTime},
				</if>
				<if test="member.firstPayTime !=null">
					first_pay_time=#{member.firstPayTime},
				</if>
				<if test="member.buyNumber !=null">
					buy_number=IFNULL(buy_number,0)+#{member.buyNumber},
				</if>
				<if test="member.addNumber !=mull">
					add_number=IFNULL(add_number,0)+#{member.addNumber},
				</if>
				<if test="member.mobile!=null">
					mobile=#{member.mobile},
				</if>
				<if test="member.firstTradeTime!=null">
				  first_trade_time=#{member.firstTradeTime},
				</if>
				<if test="member.firstTradeFinishTime!=null">
				  first_trade_finish_time=#{member.firstTradeFinishTime},
				</if>
				<if test="member.lastPayTime!=null">
				  last_pay_time=#{member.lastPayTime},
				</if>
				<if test="member.lastTradeFinishTime !=null">
				  last_trade_finish_time=#{member.lastTradeFinishTime},
				</if>
				lastModifiedBy = #{member.userName},
				lastModifiedDate = NOW(),
				optlock = optlock+1
			</set>
			WHERE buyer_nick = #{member.buyerNick}
		</foreach>
	</update>

	<select id="findMemberInfo" parameterType="java.util.Map"
		resultMap="memberInfoMap">
		SELECT * FROM crm_member_info_dto${uid} WHERE buyer_nick =
		#{buyerNick} limit 0,1
	</select>

	<!-- 修改会员信息 author:jackstraw_yu -->
	<update id="updateMembeInfo" parameterType="com.kycrm.member.domain.entity.member.MemberInfoDTO">
		UPDATE crm_member_info_dto${uid}
		<set>
			<if test="buyerEmail != null and buyerEmail != ''">
				buyer_email = #{buyerEmail},
			</if>
			<if test="gender != null and gender != ''">
				gender = #{gender},
			</if>
			<if test="birthday != null and birthday != ''">
				birthday = #{birthday},
			</if>
			<if test="age != null ">
				age = #{age},
			</if>
			<if test="weChat != null and weChat != ''">
				we_chat = #{weChat},
			</if>
			<if test="qq != null and qq != ''">
				qq = #{qq},
			</if>
			<if test="occupation != null and occupation != ''">
				occupation = #{occupation},
			</if>
			<if test="neutralBadRate != null and neutralBadRate != ''">
				neutral_bad_rate = #{neutralBadRate},
			</if>
			<if test="lastSendTime!=null">
				last_send_time=#{lastSendTime},
			</if>
			<if test="lastMarketingTime!=null">
				last_marketing_time=#{lastMarketingTime},
			</if>
			<if test="status!=null and status!=''">
				status=#{status},
			</if>
			<!-- lastModifiedBy = #{userName}, -->
			lastModifiedDate = NOW(),
			optlock = optlock+1
		</set>
		WHERE buyer_nick = #{buyerNick}
	</update>
	<update id="updateLastMarketingTime" parameterType="java.lang.Long">
		update
		crm_member_info_dto${uid} m
		set last_send_time=(select
		max(receiver_time) from
		crm_sms_record_dto${uid} mr where
		mr.buyer_nick=m.buyer_nick),
		last_marketing_time=(select
		max(receiver_time) from
		crm_sms_record_dto${uid} mr where
		mr.buyer_nick=m.buyer_nick and
		mr.type in (33,34,35,36)),
		status=(select case when count(1) >= 1 then 2 else 1 end from
		crm_blacklist_dto${uid} b where m.buyer_nick = b.nick)
	</update>

	<!--批量更新会员的拍下商品数量和拍下订单数量 -->
	<update id="batchUpdateMemberNum" parameterType="java.util.Map">
		<foreach collection="list" item="member" index="index"
			separator=";" open="" close="">
			UPDATE crm_member_info_dto${uid}
			<set>
				<if test="member.addItemNum !=null">
					add_item_num=IFNULL(add_item_num,0)+#{member.addItemNum},
				</if>
				<if test="member.addNumber !=mull">
					add_number=IFNULL(add_number,0)+#{member.addNumber},
				</if>
				lastModifiedDate = NOW(),
				optlock = optlock+1
			</set>
			WHERE buyer_nick = #{member.buyerNick}
		</foreach>
	</update>

	<select id="getCountByCondition" resultType="java.lang.Long">
		SELECT
		COUNT(1)
		FROM
		CRM_MEMBER_INFO_DTO${uid}
	</select>
	
	<select id="getCount" resultType="java.lang.Long">
		SELECT
		COUNT(1)
		FROM
		CRM_MEMBER_INFO_DTO${uid}
	</select>

	<select id="getBuyerNickList" resultMap="memberInfoMap">
		SELECT
		ID,
		BUYER_NICK
		FROM
		CRM_MEMBER_INFO_DTO${uid}
		ORDER BY ID DESC
		LIMIT
		#{startPoint},#{range}
	</select>

	<select id="getBuyerNickListByLimitId" resultMap="memberInfoMap">
		SELECT
		ID,
		BUYER_NICK
		FROM
		CRM_MEMBER_INFO_DTO${uid}
		<if test="limitId != null">
			WHERE ID &lt; #{limitId}
		</if>
		ORDER BY ID DESC
		LIMIT
		0,#{range}
	</select>

	<insert id="batchUpdate">
		INSERT INTO CRM_MEMBER_INFO_DTO${uid}
		(
		ID,
		BUYER_NICK,
		${column}
		)
		VALUES
		<if test="column == 'BUY_NUMBER'">
			<foreach collection="memberInfoList" item="member" index="index"
				separator=",">
				(#{member.id},
				#{member.buyerNick},
				#{member.buyNumber})
			</foreach>
		</if>
		<if test="column == 'ADD_NUMBER'">
			<foreach collection="memberInfoList" item="member" index="index"
				separator=",">
				(#{member.id},
				#{member.buyerNick},
				#{member.addNumber})
			</foreach>
		</if>
		<if test="column =='ADD_ITEM_NUM'">
			<foreach collection="memberInfoList" item="member" index="index"
				separator=",">
				(#{member.id},
				#{member.buyerNick},
				#{member.addItemNum})
			</foreach>
		</if>
		<if test="column == 'FIRST_PAY_TIME'">
			<foreach collection="memberInfoList" item="member" index="index"
				separator=",">
				(#{member.id},
				#{member.buyerNick},
				#{member.firstPayTime})
			</foreach>
		</if>
		ON DUPLICATE KEY UPDATE
		ID = VALUES(ID),
		BUYER_NICK =
		VALUES(BUYER_NICK),
		${column} = VALUES(${column})
	</insert>

	<insert id="batchUpdateMember">
		INSERT INTO CRM_MEMBER_INFO_DTO${uid}
		(
		ID,
		BUYER_NICK,
		BUY_NUMBER,
		ADD_NUMBER,
		ADD_ITEM_NUM,
		FIRST_PAY_TIME
		)
		VALUES
		<foreach collection="memberInfoList" item="member" index="index"
			separator=",">
			(
			#{member.id},
			#{member.buyerNick},
			#{member.buyNumber},
			#{member.addNumber},
			#{member.addItemNum},
			#{member.firstPayTime}
			)
		</foreach>
		ON
		DUPLICATE KEY UPDATE
		ID = VALUES(ID),
		BUYER_NICK = VALUES(BUYER_NICK),
		BUY_NUMBER = VALUES(BUY_NUMBER),
		ADD_NUMBER = VALUES(ADD_NUMBER),
		ADD_ITEM_NUM = VALUES(ADD_ITEM_NUM),
		FIRST_PAY_TIME =
		VALUES(FIRST_PAY_TIME)
	</insert>

	<insert id="batchUpdateRerunColumn">
		INSERT INTO CRM_MEMBER_INFO_DTO${uid}
		(
		ID,
		BUYER_NICK,
		TRADE_NUM,
		CLOSE_TRADE_NUM,
		TRADE_AMOUNT,
		ITEM_NUM,
		AVG_TRADE_PRICE,
		ADD_ITEM_NUM,
		ADD_NUMBER,
		CLOSE_TRADE_AMOUNT,
		CLOSE_ITEM_NUM,
		BUYER_ALIPAY_NO,
		RECEIVER_INFO_STR,
		LAST_TRADE_TIME,
		FIRST_PAY_TIME,
		FIRST_TRADE_TIME,
		LAST_PAY_TIME,
		FIRST_TRADE_FINISH_TIME,
		LAST_TRADE_FINISH_TIME
		)
		VALUES
		<foreach collection="memberInfoList" item="member" index="index"
			separator=",">
			(
			#{member.id},
			#{member.buyerNick},
			#{member.tradeNum},
			#{member.closeTradeNum},
			#{member.tradeAmount},
			#{member.itemNum},
			#{member.avgTradePrice},
			#{member.addItemNum},
			#{member.addNumber},
			#{member.closeTradeAmount},
			#{member.closeItemNum},
			#{member.buyerAlipayNo},
			#{member.receiverInfoStr},
			#{member.lastTradeTime},
			#{member.firstPayTime},
			#{member.firstTradeTime},
			#{member.lastPayTime},
			#{member.firstTradeFinishTime},
			#{member.lastTradeFinishTime}
			)
		</foreach>
		ON
		DUPLICATE KEY UPDATE
		ID = VALUES(ID),
		BUYER_NICK = VALUES(BUYER_NICK),
		TRADE_NUM = VALUES(TRADE_NUM),
		CLOSE_TRADE_NUM = VALUES(CLOSE_TRADE_NUM),
		TRADE_AMOUNT = VALUES(TRADE_AMOUNT),
		ITEM_NUM = VALUES(ITEM_NUM),
		AVG_TRADE_PRICE = VALUES(AVG_TRADE_PRICE),
		ADD_ITEM_NUM = VALUES(ADD_ITEM_NUM),
		ADD_NUMBER = VALUES(ADD_NUMBER),
		CLOSE_TRADE_AMOUNT = VALUES(CLOSE_TRADE_AMOUNT),
		CLOSE_ITEM_NUM = VALUES(CLOSE_ITEM_NUM),
		BUYER_ALIPAY_NO = VALUES(BUYER_ALIPAY_NO),
		RECEIVER_INFO_STR = VALUES(RECEIVER_INFO_STR),
		LAST_TRADE_TIME = VALUES(LAST_TRADE_TIME),
		FIRST_PAY_TIME = VALUES(FIRST_PAY_TIME),
		FIRST_TRADE_TIME = VALUES(FIRST_TRADE_TIME),
		LAST_PAY_TIME = VALUES(LAST_PAY_TIME),
		FIRST_TRADE_FINISH_TIME = VALUES(FIRST_TRADE_FINISH_TIME),
		LAST_TRADE_FINISH_TIME = VALUES(LAST_TRADE_FINISH_TIME)
	</insert>

	<select id="getFilterRecordCount" resultType="int">
		SELECT COUNT(1)
		FROM CRM_PREMIUM_FILTER_RECORD${uid}
	</select>

	<select id="dropTable">
		DROP TABLE crm_premium_filter_record${uid}
	</select>
	
	<update id="alterTableMember" parameterType="java.util.Map">
		DROP   INDEX   index_buyer_nick  ON  crm_member_info_dto${uid};
		DROP   INDEX   index_buyer_nick  ON  crm_member_receive_detail${uid};
	
		alter table crm_member_info_dto${uid} modify column receiver_name text;
		alter table crm_member_info_dto${uid} modify column receiver_info_str text;
		alter table crm_member_info_dto${uid} modify column buyer_nick varchar(1500);
		
		alter table crm_member_receive_detail${uid} modify column receiver_name text;
		alter table crm_member_receive_detail${uid} modify column receiver_address text;
		alter table crm_member_receive_detail${uid} modify column buyer_nick varchar(1500);
		
		alter table crm_member_info_dto${uid} add index index_buyer_nick(buyer_nick(255));
		alter table crm_member_receive_detail${uid} add index index_buyer_nick(buyer_nick(255));
	</update>
	
	<update id="updateMemberInfoNum" parameterType="com.kycrm.member.domain.entity.member.MemberInfoDTO">
	    update CRM_MEMBER_INFO_DTO${uid} 
	    <set>
	           <if test="tradeNum != null">
					trade_num =IFNULL(trade_num,0)+#{tradeNum},
				</if>
				<if test="closeTradeNum != null">
					close_trade_num =IFNULL(close_trade_num,0)+#{closeTradeNum},
				</if>
				<if test="tradeAmount != null">
					trade_amount =IFNULL(trade_amount,0)+ #{tradeAmount},
				</if>
				<if test="closeTradeAmount != null">
					close_trade_amount =IFNULL(close_trade_amount,0)+#{closeTradeAmount},
				</if>
				<if test="itemNum != null">
					item_num =IFNULL(item_num,0)+#{itemNum},
				</if>
				<if test="closeItemNum != null">
					close_item_num =IFNULL(close_item_num,0)+#{closeItemNum},
				</if>
				lastModifiedDate = NOW(),
				optlock = optlock+1
	    </set>
	      WHERE buyer_nick = #{buyerNick}
	</update>
	
	<update id="updateMemberAvg" parameterType="java.util.Map">
	   update CRM_MEMBER_INFO_DTO${uid} set avg_trade_price=ROUND(trade_amount/trade_num,2) where buyer_nick = #{buyerNick} 
	</update>
</mapper>